function x = average_embeddings(data_tbl, meta_tbl)
    % NEWLY IMPLEMENTED AS OF 14 JULY 2022. Not relevant to "Opening Window
    % ECoG" paper. Currently untested.
    %
    % Construct a special "avg" subject in the metadata structure that conforms
    % to these averaged predictions. Note that predictions are sorted into
    % alphabetical order by stimulus so that predictions for the same item are
    % being averaged.
    tmp = mat2cell(meta_tbl.metadata, ones(height(meta_tbl), 1), size(meta_tbl.metadata, 2));
    textprogressbar(sprintf('%36s', 'Insert average into metadata: '));
    tic;
    textprogressbar(0);
    for i = 1:height(meta_tbl)
        tmp{i} = [tmp{i}, average_metadata(tmp{i})];
        textprogressbar((i/height(meta_tbl)) * 100);
    end
    meta_tbl.metadata = cell2mat(tmp);
    textprogressbar(sprintf(' done (%.2f s)', toc));

    % The preparation function does two things:
    % 1. Ensure all matrices of predictions are the same size. They may not be
    %    the same size if rows were censored from the neuroimaging data (an
    %    items x neural features matrix). The NaNs are inserted for the missing
    %    predictions.
    % 2. Sort the combined predicted embeddings to be alphabetical by stimulus
    %    label to ensure that averages are computed over corresponding items.
    fprintf('Prepare embeddings for averaging ');
    tic;
    final_comb = prep_rows_for_averaging(final_comb, meta_tbl);
    fprintf('(%.2f s)\n', toc);

    concat_avg = @(x) {nanmean(cat(3, x{:}), 3)}; %#ok
    tmp = rowfun( ...
        concat_avg, ...
        final_comb, ...
        'InputVariables', "Cz", ...
        'GroupingVariables', ["WindowStart", "WindowSize"], ...
        'OutputVariableNames', "Cz" ...
    );
    fprintf('Average embeddings ');
    tic;
    final_comb = join(...
        removevars(tmp, "GroupCount"), ...
        unique(removevars(final_comb, ["Cz", "subject"])) ...
    );
    final_comb.subject = repmat("avg", height(final_comb), 1);

    if bootstrap_averaged_embeddings
        nrep = 10000;
        func = @(subj, seed, Cz) ...
            bootstrap_predicted_embeddings(nrep, subj, seed, Cz);
        tmp = rowfun(func, perm_comb, ...
                     'GroupingVariables', ["WindowStart", "WindowSize"], ...
                     'InputVariables', ["subject", "RandomSeed", "Cz"], ...
                     'OutputFormat', "table", ...
                     'OutputVariableNames', ["Cz", "RandomSeed"]);
        perm_comb = join(...
            removevars(tmp, "GroupCount"), ...
            unique(removevars(perm_comb, ["Cz", "subject", "RandomSeed"])) ...
        );
        perm_comb.subject = repmat("avg", height(perm_comb), 1);
    else
        concat_avg = @(x) {nanmean(cat(3, x{:}), 3)}; %#ok
        tmp = rowfun( ...
            concat_avg, ...
            perm_comb, ...
            'InputVariables', "Cz", ...
            'GroupingVariables', ["WindowStart", "WindowSize", "RandomSeed"], ...
            'OutputVariableNames', "Cz" ...
        );
        perm_comb = join(...
            removevars(tmp, "GroupCount"), ...
            unique(removevars(perm_comb, ["Cz", "subject"])) ...
        );
        perm_comb.subject = repmat("avg", height(perm_comb), 1);
    end
    fprintf('(%.2f s)\n', toc);
end
