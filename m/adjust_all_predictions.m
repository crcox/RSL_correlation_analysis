function Cz_adj = adjust_all_predictions(results, metadata, options)

    arguments
      results
      metadata
      options.cvscheme
      options.scale_singular_vectors
    end

    vars = ["Cz", "subject", "cvholdout", ...
            "target_label", "target_type", ...
            "sim_source", "sim_metric", ...
            "filters", "FiltersToApplyBeforeEmbedding", ...
            "normalize_target", "normalize_wrt"];

    fun = @(cz,s,cv,tl,tt,ss,sm,f,fb,nt,nwrt) adjust_predictions(cz, metadata, s, ...
      cvscheme = options.cvscheme, ...
      cvholdout = cv, ...
      target_type = tt, ...
      target_label = tl, ...
      sim_source = ss, ...
      sim_metric = sm, ...
      filters = f, ...
      filters_be = fb, ...
      normalize_target = nt, ...
      normalize_wrt = nwrt, ...
      scale_singular_vectors = options.scale_singular_vectors);

    parallel_pool = gcp('nocreate');
    if isempty(parallel_pool)
        Cz_adj = rowfun(fun, results, ...
                        'InputVariables', vars, ...
                        'ExtractCellContents', true, ...
                        'OutputFormat', 'cell');
    else
        Cz_adj = par_rowfun(fun, results, ...
                            'InputVariables', vars, ...
                            'ExtractCellContents', true, ...
                            'OutputFormat', 'cell');
    end
end

