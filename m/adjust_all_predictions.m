function Cz_adj = adjust_all_predictions(metadata, results, varargin)
    p = inputParser();
    addRequired(p, "metadata", @isstruct);
    addRequired(p, "results", @istable);
    addOptional(p, "cvscheme", 1, @(x) isnumeric(x) && floor(x) == x);
    addOptional(p, "scale_singular_vectors", true, @islogical);
    parse(p, metadata, results, varargin{:});

    cvscheme = p.Results.cvscheme;

    scale_singular_vectors = p.Results.scale_singular_vectors;

    vars = ["Cz", "subject", "cvholdout", ...
            "target_label", "target_type", ...
            "sim_source", "sim_metric", ...
            "filters", "FiltersToApplyBeforeEmbedding", ...
            "normalize_target", "normalize_wrt"];
    fun = @(varargin) adjust_predictions(metadata, cvscheme, varargin{:}, ...
                                         scale_singular_vectors);

    parallel_pool = gcp('nocreate');
    if isempty(parallel_pool)
        Cz_adj = rowfun(fun, results, ...
                        'InputVariables', vars, ...
                        'ExtractCellContents', true, ...
                        'OutputFormat', 'cell');
    else
        Cz_adj = par_rowfun(fun, results, ...
                            'InputVariables', vars, ...
                            'ExtractCellContents', true, ...
                            'OutputFormat', 'cell');
    end
end

